{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","passageRef","useRef","questionRef","useState","answer","setAnswer","model","setModel","loadModel","a","qna","loadedModel","console","log","useEffect","answerQuestion","e","which","passage","current","value","question","findAnswers","answers","className","ref","rows","cols","onKeyPress","size","map","ans","idx","text","Math","floor","score","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAAe,I,8CCyDAA,MAhDf,WACE,IAAMC,EAAaC,iBAAO,MACpBC,EAAcD,iBAAO,MAC3B,EAA2BE,qBAA3B,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAS,uCAAG,4BAAAC,EAAA,sEACYC,MADZ,OACRC,EADQ,OAEdJ,EAASI,GACTC,QAAQC,IAAI,gBAHE,2CAAH,qDAKfC,qBAAU,WAAMN,MAAa,IAC7B,IAAMO,EAAc,uCAAG,WAAMC,GAAN,mBAAAP,EAAA,yDACL,IAAXO,EAAEC,OAAuB,MAARX,EADD,uBAEnBM,QAAQC,IAAI,uBACNK,EAAUlB,EAAWmB,QAAQC,MAC7BC,EAAWnB,EAAYiB,QAAQC,MAJlB,SAMGd,EAAMgB,YAAYD,EAASH,GAN9B,OAMbK,EANa,OAOnBlB,EAAUkB,GACVX,QAAQC,IAAIU,GARO,2CAAH,sDAYpB,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACa,MAARlB,EACG,gCACI,gDACA,qBAAKkB,UAAU,cAGnB,eAAC,WAAD,qBAEI,0BAAUC,IAAKzB,EAAY0B,KAAK,KAAKC,KAAK,QAF9C,iBAII,uBAAOF,IAAKvB,EAAa0B,WAAYb,EAAgBc,KAAK,OAC1D,uBALJ,UAOKzB,EAASA,EAAO0B,KAAI,SAACC,EAAKC,GAAN,OAAa,gCAAK,wCAAWA,EAAI,EAAf,SAAL,IAA+BD,EAAIE,KAAnC,KAA2CC,KAAKC,MAAgB,IAAVJ,EAAIK,OAAW,IAArE,UAAoF,WCrCzHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3775c0f8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, {useRef, useEffect, useState} from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as qna from \"@tensorflow-models/qna\";\nimport { Fragment } from 'react';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\n\nfunction App() {\n  const passageRef = useRef(null);\n  const questionRef = useRef(null);\n  const [answer,setAnswer] = useState();\n  const [model, setModel] = useState(null);\n  //tensorflow model\n  const loadModel = async () => {\n      const loadedModel = await qna.load()\n      setModel(loadedModel);\n      console.log('Model Loaded')\n  }\n  useEffect(()=> {loadModel()},[])\n  const answerQuestion = async(e)=>{\n      if(e.which == 13 && model!= null){\n      console.log('Question submitted.')\n      const passage = passageRef.current.value\n      const question = questionRef.current.value\n\n      const answers = await model.findAnswers(question,passage)\n      setAnswer(answers)\n      console.log(answers)\n  }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          {model ==null ?\n              <div>\n                  <div>Model Loading</div>\n                  <div className=\"loader\"></div>\n              </div>\n              :\n              <Fragment>\n                  Passage\n                  <textarea ref={passageRef} rows=\"30\" cols=\"100\"></textarea>\n                  Ask a Question\n                  <input ref={questionRef} onKeyPress={answerQuestion} size=\"80\"></input>\n                  <br />\n                  Answers\n                  {answer ? answer.map((ans, idx) =><div><b>Answer {idx+1} - </b> {ans.text} ({Math.floor(ans.score*100)/100})</div>) : \"\"}\n              </Fragment>\n          }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}